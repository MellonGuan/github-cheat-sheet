{"name":"Github-cheat-sheet","tagline":"A list of cool features of Git and GitHub.","body":"# GitHub Cheat Sheet\r\nA collection of cool hidden and not so hidden features of Git and GitHub. This cheat sheet was inspired by [Zach Holman](https://github.com/holman)'s [Git and GitHub Secrets](http://www.confreaks.com/videos/1229-aloharuby2012-git-and-github-secrets) talk at Aloha Ruby Conference 2012 ([slides](https://speakerdeck.com/holman/git-and-github-secrets)) and his [More Git and GitHub Secrets](https://vimeo.com/72955426) talk at WDCNZ 2013 ([slides](https://speakerdeck.com/holman/more-git-and-github-secrets)).\r\n\r\n*Shortlink: [`http://git.io/sheet`](http://git.io/sheet)*\r\n\r\n*Read this in other languages: [English](README.md), [한국어](README.ko.md), [日本語](README.ja.md), [简体中文](README.zh-cn.md).*\r\n\r\n## Table of Contents\r\n - [GitHub](#github)\r\n  - [Ignore Whitespace](#ignore-whitespace)\r\n  - [Adjust Tab Space](#adjust-tab-space)\r\n  - [Commit History by Author](#commit-history-by-author)\r\n  - [Cloning a Repository](#cloning-a-repository)\r\n  - [Compare all Branches to Another Branch](#compare-all-branches-to-another-branch)\r\n  - [Comparing Branches](#comparing-branches)\r\n  - [Compare Branches across Forked Repositories](#compare-branches-across-forked-repositories)\r\n  - [Gists](#gists)\r\n  - [Git.io](#gitio)\r\n  - [Keyboard Shortcuts](#keyboard-shortcuts)\r\n  - [Line Highlighting in Repositories](#line-highlighting-in-repositories)\r\n  - [Closing Issues via Commit Messages](#closing-issues-via-commit-messages)\r\n  - [Cross-Link Issues](#cross-link-issues)\r\n  - [CI Status on Pull Requests](#ci-status-on-pull-requests)\r\n  - [Syntax Highlighting in Markdown Files](#syntax-highlighting-in-markdown-files)\r\n  - [Emojis](#emojis)\r\n  - [Images/GIFs](#imagesgifs)\r\n    - [Embedding Images in GitHub Wiki](#embedding-images-in-github-wiki)\r\n  - [Quick Quoting](#quick-quoting)\r\n  - [Quick Licensing](#quick-licensing)\r\n  - [Task Lists](#task-lists)\r\n    - [Task Lists in Markdown Documents](#task-lists-in-markdown-documents)\r\n  - [Relative Links](#relative-links)\r\n  - [Metadata and Plugin Support for GitHub Pages](#metadata-and-plugin-support-for-github-pages)\r\n  - [Viewing YAML Metadata in your Documents](#viewing-yaml-metadata-in-your-documents)\r\n  - [Rendering Tabular Data](#rendering-tabular-data)\r\n  - [Diffs](#diffs)\r\n    - [Rendered prose Diffs](#rendered-prose-diffs)\r\n    - [Diffable Maps](#diffable-maps)\r\n    - [Expanding Context in Diffs](#expanding-context-in-diffs)\r\n    - [Diff or Patch of Pull Request](#diff-or-patch-of-pull-request)\r\n  - [Hub](#hub)\r\n  - [Decreasing Contributor Friction](#decreasing-contributor-friction)\r\n  - [Contributing Guidelines](#contributing-guidelines)\r\n  - [GitHub Resources](#github-resources)\r\n    - [GitHub Talks](#github-talks)\r\n - [Git](#git)\r\n  - [Previous Branch](#previous-branch)\r\n  - [Stripspace](#stripspace)\r\n  - [Checking out Pull Requests](#checking-out-pull-requests)\r\n  - [Empty Commits :trollface:](#empty-commits-trollface)\r\n  - [Styled Git Status](#styled-git-status)\r\n  - [Styled Git Log](#styled-git-log)\r\n  - [Git Query](#git-query)\r\n  - [Merged Branches](#merged-branches)\r\n  - [Web Server for Browsing Local Repositories](#web-server-for-browsing-local-repositories)\r\n  - [Git Configurations](#git-configurations)\r\n    - [Aliases](#aliases)\r\n    - [Auto-Correct](#auto-correct)\r\n    - [Color](#color)\r\n  - [Git Resources](#git-resources)\r\n    - [Git Books](#git-books)\r\n\r\n## GitHub\r\n### Ignore Whitespace\r\nAdding `?w=1` to any diff URL will remove any changes only in whitespace, enabling you to see only that code that has changed.\r\n\r\n![Diff without whitespace](https://camo.githubusercontent.com/797184940defadec00393e6559b835358a863eeb/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f776869746573706163652e706e67)\r\n\r\n[*Read more about GitHub secrets.*](https://github.com/blog/967-github-secrets)\r\n\r\n### Adjust Tab Space\r\nAdding `?ts=4` to a diff or file URL will display tab characters as 4 spaces wide instead of the default 8. The number after `ts` can be adjusted to suit your preference. This does not work on Gists, or raw file views.\r\n\r\nHere is a Go source file [before](https://github.com/pengwynn/flint/blob/master/flint/flint.go) adding `?ts=4`:\r\n\r\n![Before, tab space example](http://i.imgur.com/GIT1Fr0.png)\r\n\r\n...and this is [after](https://github.com/pengwynn/flint/blob/master/flint/flint.go?ts=4) adding `?ts=4`:\r\n\r\n![After, tab space example](http://i.imgur.com/70FL4H9.png)\r\n\r\n### Commit History by Author\r\nTo view all commits on a repo by author add `?author=username` to the URL.\r\n\r\n```\r\nhttps://github.com/rails/rails/commits/master?author=dhh\r\n```\r\n\r\n![DHH commit history](http://i.imgur.com/mDWwuaY.png)\r\n\r\n[*Read more about the differences between commits views.*](https://help.github.com/articles/differences-between-commit-views)\r\n\r\n### Cloning a Repository\r\nWhen cloning a repository the `.git` can be left off the end.\r\n\r\n```bash\r\n$ git clone https://github.com/tiimgreen/github-cheat-sheet\r\n```\r\n\r\n[*Read more about the Git `clone` command.*](http://git-scm.com/docs/git-clone)\r\n\r\n### Compare all Branches to Another Branch\r\n\r\nIf you go to the repo's [Branches](https://github.com/tiimgreen/github-cheat-sheet/branches) page, next to the Commits button:\r\n\r\n```\r\nhttps://github.com/{user}/{repo}/branches\r\n```\r\n\r\n... you would see a list of all branches which are not merged into the main branch.\r\n\r\nFrom here you can access the compare page or delete a branch with a click of a button.\r\n\r\n![Compare branches not merged into master in jquery/jquery repo - https://github.com/jquery/jquery/branches](http://i.imgur.com/gKWPe8a.png)\r\n\r\nHowever, often you need to compare branches to a branch other than `master` (e.g. `development`). To do this, append the URL with the name of the branch like so:\r\n\r\n```\r\nhttps://github.com/{user}/{repo}/branches/{branch}\r\n```\r\n\r\n![Compare branches not merged into `1.x-master` in jquery/jquery repo - https://github.com/jquery/jquery/branches/1.x-master](http://i.imgur.com/jpc6Urb.png)\r\n\r\nTo see the merged branches, append `?merged=1` to the URL.\r\n\r\n![Compare branches merged in to `1.x-master` in jquery/jquery repo - https://github.com/jquery/jquery/branches/1.x-master?merged=1](http://i.imgur.com/KmYyCVh.png)\r\n\r\nThis view allows you to delete branches easily from the page, without using the command-line.\r\n\r\n### Comparing Branches\r\nTo use GitHub to compare branches, change the URL to look like this:\r\n\r\n```\r\nhttps://github.com/user/repo/compare/{range}\r\n```\r\n\r\nWhere `{range} = master...4-1-stable`\r\n\r\nFor example:\r\n\r\n```\r\nhttps://github.com/rails/rails/compare/master...4-1-stable\r\n```\r\n\r\n![Rails branch compare example](http://i.imgur.com/0Z52X5Y.png)\r\n\r\n`{range}` can be changed to things like:\r\n\r\n```\r\nhttps://github.com/rails/rails/compare/master@{1.day.ago}...master\r\nhttps://github.com/rails/rails/compare/master@{2014-10-04}...master\r\n```\r\n\r\n*Dates are in the format `YYYY-DD-MM`*\r\n\r\n![Another compare example](http://i.imgur.com/5dtzESz.png)\r\n\r\n...which allows you to see the difference on the master branch up a set time ago or a specified date.\r\n\r\n[*Read more about comparing commits across time.*](https://help.github.com/articles/comparing-commits-across-time)\r\n\r\n### Compare Branches across Forked Repositories\r\nTo use GitHub to compare branches across forked repositories, change the URL to look like this:\r\n\r\n```\r\nhttps://github.com/user/repo/compare/{foreign-user}:{branch}...{own-branch}\r\n```\r\n\r\nFor example:\r\n\r\n```\r\nhttps://github.com/rails/rails/compare/byroot:master...master\r\n```\r\n\r\n![Forked branch compare](http://i.imgur.com/Q1W6qcB.png)\r\n\r\n### Gists\r\n[Gists](https://gist.github.com/) are an easy way to work with small bits of code without creating a fully fledged repository.\r\n\r\n![Gist](http://i.imgur.com/VkKI1LC.png?1)\r\n\r\nAdd `.pibb` to the end of any Gist URL ([like this](https://gist.github.com/tiimgreen/10545817.pibb)) in order to get the *HTML only* version suitable for embedding in any other site.\r\n\r\nGists can be treated as a full repository so they can be cloned like any other:\r\n\r\n```bash\r\n$ git clone https://gist.github.com/tiimgreen/10545817\r\n```\r\n\r\n![Gists](http://i.imgur.com/dULZXXo.png)\r\n\r\n[*Read more about creating gists.*](https://help.github.com/articles/creating-gists)\r\n\r\n### Git.io\r\n[Git.io](http://git.io) is a simple URL shortener for GitHub.\r\n\r\n![Git.io](http://i.imgur.com/6JUfbcG.png?1)\r\n\r\nYou can also use it via pure HTTP using Curl:\r\n\r\n```bash\r\n$ curl -i http://git.io -F \"url=https://github.com/...\"\r\nHTTP/1.1 201 Created\r\nLocation: http://git.io/abc123\r\n\r\n$ curl -i http://git.io/abc123\r\nHTTP/1.1 302 Found\r\nLocation: https://github.com/...\r\n```\r\n\r\n[*Read more about Git.io.*](https://github.com/blog/985-git-io-github-url-shortener)\r\n\r\n### Keyboard Shortcuts\r\nWhen on a repository page, keyboard shortcuts allow you to navigate easily.\r\n\r\n - Pressing `t` will bring up a file explorer.\r\n - Pressing `w` will bring up the branch selector.\r\n - Pressing `s` will select the Command Bar.\r\n - Pressing `l` will edit labels on existing Issues.\r\n - Pressing `y` **when looking at a file** (e.g. `https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md`) will change your URL to one which, in effect, freezes the page you are looking at. If this code changes, you will still be able to see what you saw at that current time.\r\n\r\nTo see all of the shortcuts for the current page press `?`:\r\n\r\n![Keyboard shortcuts](http://i.imgur.com/y5ZfNEm.png)\r\n\r\n[*Read more about using the Command Bar.*](https://help.github.com/articles/using-the-command-bar)\r\n\r\n### Line Highlighting in Repositories\r\nEither adding `#L52` to the end of a code file URL or simply clicking the line number will highlight that line number.\r\n\r\nIt also works with ranges, e.g. `#L53-L60`, to select ranges, hold `shift` and click two lines:\r\n\r\n```\r\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L53-L60\r\n```\r\n\r\n![Line Highlighting](http://i.imgur.com/8AhjrCz.png)\r\n\r\n### Closing Issues via Commit Messages\r\nIf a particular commit fixes an issue, any of the keywords `fix/fixes/fixed`, `close/closes/closed` or `resolve/resolves/resolved`, followed by the issue number, will close the issue once it is committed to the master branch.\r\n\r\n```bash\r\n$ git commit -m \"Fix screwup, fixes #12\"\r\n```\r\n\r\nThis closes the issue and references the closing commit.\r\n\r\n![Closing Repo](http://i.imgur.com/Uh1gZdx.png)\r\n\r\n[*Read more about closing Issues via commit messages.*](https://help.github.com/articles/closing-issues-via-commit-messages)\r\n\r\n### Cross-Link Issues\r\nIf you want to link to another issue in the same repository, simple type hash `#` then the issue number, it will be auto-linked.\r\n\r\nTo link to an issue in another repository, `user_name/repo_name#ISSUE_NUMBER` e.g. `tiimgreen/toc#12`.\r\n\r\n![Cross-Link Issues](https://camo.githubusercontent.com/447e39ab8d96b553cadc8d31799100190df230a8/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f7265666572656e6365732e706e67)\r\n\r\n### CI Status on Pull Requests\r\nIf set up correctly, every time you receive a Pull Request, [Travis CI](https://travis-ci.org/) will build that Pull Request just like it would every time you make a new commit. Read more about how to [get started with Travis CI](http://docs.travis-ci.com/user/getting-started/).\r\n\r\n[![Travis CI status](https://cloud.githubusercontent.com/assets/1687642/2700187/3a88838c-c410-11e3-9a46-e65e2a0458cd.png)](https://github.com/octokit/octokit.rb/pull/452)\r\n\r\n[*Read more about the commit status API.*](https://github.com/blog/1227-commit-status-api)\r\n\r\n### Syntax Highlighting in Markdown Files\r\nFor example, to syntax highlight Ruby code in your Markdown files write:\r\n\r\n    ```ruby\r\n    require 'tabbit'\r\n    table = Tabbit.new('Name', 'Email')\r\n    table.add_row('Tim Green', 'tiimgreen@gmail.com')\r\n    puts table.to_s\r\n    ```\r\n\r\nThis will produce:\r\n\r\n```ruby\r\nrequire 'tabbit'\r\ntable = Tabbit.new('Name', 'Email')\r\ntable.add_row('Tim Green', 'tiimgreen@gmail.com')\r\nputs table.to_s\r\n```\r\n\r\nGitHub uses [Linguist](https://github.com/github/linguist) to perform language detection and syntax highlighting. You can find out which keywords are valid by perusing the [languages YAML file](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml).\r\n\r\n[*Read more about GitHub Flavored Markdown.*](https://help.github.com/articles/github-flavored-markdown)\r\n\r\n### Emojis\r\nEmojis can added to on Pull Requests, Issues, commit messages, Markdown files, etc. using `:name_of_emoji:`:\r\n\r\n```\r\n:smile:\r\n```\r\n\r\nWould produce:\r\n\r\n:smile:\r\n\r\nThe full list of supported Emojis on GitHub can be found at [emoji-cheat-sheet.com](http://www.emoji-cheat-sheet.com/) or [scotch-io/All-Github-Emoji-Icons](https://github.com/scotch-io/All-Github-Emoji-Icons).\r\n\r\nThe top 5 used Ejmojis on GitHub are:\r\n\r\n1. :shipit: - `:shipit:`\r\n2. :sparkles: - `:sparkles:`\r\n3. :-1: - `:-1:`\r\n4. :+1: - `:+1:`\r\n5. :clap: - `:clap:`\r\n\r\n### Images/GIFs\r\nImages and GIFs can be added to comments, READMEs etc.:\r\n\r\n```\r\n![Alt Text](http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif)\r\n```\r\n\r\n![Peter don't care](http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif)\r\n\r\nAll images are cached on GitHub, so if your host goes down, the image will remain available.\r\n\r\n#### Embedding Images in GitHub Wiki\r\nThere are multiple ways of embedding images in Wiki pages. There's the standard Markdown syntax (shown above). But there's also a syntax that allows things like specifying the height or width of the image:\r\n\r\n```markdown\r\n[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]\r\n```\r\n\r\nWhich produces:\r\n\r\n![Just a screenshot](http://i.imgur.com/J5bMf7S.png)\r\n\r\n### Quick Quoting\r\nWhen on a comment thread and you want to quote something someone previously said, highlight the text and press `r`, this will copy it into your text box in the block-quote format.\r\n\r\n![Quick Quote](https://f.cloud.github.com/assets/296432/124483/b0fa6204-6ef0-11e2-83c3-256c37fa7abc.gif)\r\n\r\n[*Read more about quick quoting.*](https://github.com/blog/1399-quick-quotes)\r\n\r\n### Quick Licensing\r\nWhen creating a repository GitHub gives you the options of adding in a pre-made license:\r\n\r\n![License](http://i.imgur.com/Chqj4Fg.png)\r\n\r\nYou can also add them to existing repositories by creating a new file through the web interface. When the name `LICENSE` is typed in you will get an option to use a template:\r\n\r\n![License](http://i.imgur.com/fTjQict.png)\r\n\r\nAlso works for `.gitignore`.\r\n\r\n[*Read more about open source licensing.*](https://help.github.com/articles/open-source-licensing)\r\n\r\n### Task Lists\r\nIn Issues and Pull requests check boxes can be added with the following syntax (notice the space):\r\n\r\n```\r\n- [ ] Be awesome\r\n- [ ] Prepare dinner\r\n  - [ ] Research recipe\r\n  - [ ] Buy ingredients\r\n  - [ ] Cook recipe\r\n- [ ] Sleep\r\n```\r\n\r\n![Task List](http://i.imgur.com/jJBXhsY.png)\r\n\r\nWhen they are clicked, they will be updated in the pure Markdown:\r\n\r\n```\r\n- [x] Be awesome\r\n- [ ] Prepare dinner\r\n  - [x] Research recipe\r\n  - [x] Buy ingredients\r\n  - [ ] Cook recipe\r\n- [ ] Sleep\r\n```\r\n\r\n[*Read more about task lists.*](https://help.github.com/articles/writing-on-github#task-lists)\r\n\r\n#### Task Lists in Markdown Documents\r\nIn full Markdown documents **read-only** checklists can now be added using the following syntax:\r\n\r\n```\r\n- [ ] Mercury\r\n- [x] Venus\r\n- [x] Earth\r\n  - [x] Moon\r\n- [x] Mars\r\n  - [ ] Deimos\r\n  - [ ] Phobos\r\n```\r\n\r\n- [ ] Mercury\r\n- [x] Venus\r\n- [x] Earth\r\n  - [x] Moon\r\n- [x] Mars\r\n  - [ ] Deimos\r\n  - [ ] Phobos\r\n\r\n[*Read more about task lists in markdown documents.*](https://github.com/blog/1825-task-lists-in-all-markdown-documents)\r\n\r\n### Relative Links\r\nRelative links are recommended in your Markdown files when linking to internal content.\r\n\r\n```markdown\r\n[Link to a header](#awesome-section)\r\n[Link to a file](docs/readme)\r\n```\r\n\r\nAbsolute links have to be updated whenever the URL changes (e.g. repository renamed, username changed, project forked). Using relative links makes your documentation easily stand on its own.\r\n\r\n[*Read more about relative links.*](https://help.github.com/articles/relative-links-in-readmes)\r\n\r\n### Metadata and Plugin Support for GitHub Pages\r\nWithin Jekyll pages and posts, repository information is available within the `site.github` namespace, and can be displayed, for example, using `{{ site.github.project_title }}`.\r\n\r\nThe Jemoji and jekyll-mentions plugins enable [emoji](#emojis) and [@mentions](https://github.com/blog/821) in your Jekyll posts and pages to work just like you'd expect when interacting with a repository on GitHub.com.\r\n\r\n[*Read more about repository metadata and plugin support for GitHub Pages.*](https://github.com/blog/1797-repository-metadata-and-plugin-support-for-github-pages)\r\n\r\n### Viewing YAML Metadata in your Documents\r\nMany blogging websites, like [Jekyll](http://jekyllrb.com/) with [GitHub Pages](http://pages.github.com/), depend on some YAML-formatted metadata at the beginning of your post. GitHub will render this metadata as a horizontal table, for easier reading\r\n\r\n![YAML metadata](https://camo.githubusercontent.com/47245aa16728e242f74a9a324ce0d24c0b916075/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f36343035302f313232383236372f65303439643063362d323761302d313165332d396464382d6131636432323539393334342e706e67)\r\n\r\n[*Read more about viewing YAML metadata in your documents.*](https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents)\r\n\r\n### Rendering Tabular Data\r\nGitHub supports rendering tabular data in the form of `.csv` (comma-separated) and `.tsv` (tab-separated) files.\r\n\r\n![Tabular data](https://camo.githubusercontent.com/1b6dd0157ffb45d9939abf14233a0cb13b3b4dfe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3238323735392f3937363436322f33323038336463652d303638642d313165332d393262322d3566323863313061353035392e706e67)\r\n\r\n[*Read more about rendering tabular data.*](https://github.com/blog/1601-see-your-csvs)\r\n\r\n### Diffs\r\n#### Rendered Prose Diffs\r\nCommits and pull requests including rendered documents supported by GitHub (e.g. Markdown) feature *source* and *rendered* views.\r\n\r\n![Source / Rendered view](https://github-images.s3.amazonaws.com/help/repository/rendered_prose_diff.png)\r\n\r\nClick the \"rendered\" button to see the changes as they'll appear in the rendered document. Rendered prose view is handy when you're adding, removing, and editing text:\r\n\r\n![Rendered Prose Diffs](https://f.cloud.github.com/assets/17715/2003056/3997edb4-862b-11e3-90be-5e9586edecd7.png)\r\n\r\n[*Read more about rendered prose diffs.*](https://github.com/blog/1784-rendered-prose-diffs)\r\n\r\n#### Diffable Maps\r\nAny time you view a commit or pull request on GitHub that includes geodata, GitHub will render a visual representation of what was changed.\r\n\r\n[![Diffable Maps](https://f.cloud.github.com/assets/282759/2090660/63f2e45a-8e97-11e3-9d8b-d4c8078b004e.gif)](https://github.com/benbalter/congressional-districts/commit/2233c76ca5bb059582d796f053775d8859198ec5)\r\n\r\n[*Read more about diffable maps.*](https://github.com/blog/1772-diffable-more-customizable-maps)\r\n\r\n#### Expanding Context in Diffs\r\nUsing the *unfold* button in the gutter of a diff, you can reveal additional lines of context with a click. You can keep clicking *unfold* until you've revealed the whole file, and the feature is available anywhere GitHub renders diffs.\r\n\r\n![Expanding Context in Diffs](https://f.cloud.github.com/assets/22635/1610539/863c1f64-5584-11e3-82bf-151b406a272f.gif)\r\n\r\n[*Read more about expanding context in diffs.*](https://github.com/blog/1705-expanding-context-in-diffs)\r\n\r\n#### Diff or Patch of Pull Request\r\nYou can get the diff of a Pull Request by adding a `.diff` or `.patch`\r\nextension to the end of the URL. For example:\r\n\r\n```\r\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15\r\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15.diff\r\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15.patch\r\n```\r\n\r\nThe `.diff` extension would give you this in plain text:\r\n\r\n```\r\ndiff --git a/README.md b/README.md\r\nindex 88fcf69..8614873 100644\r\n--- a/README.md\r\n+++ b/README.md\r\n@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i\r\n - [Merged Branches](#merged-branches)\r\n - [Quick Licensing](#quick-licensing)\r\n - [TODO Lists](#todo-lists)\r\n+- [Relative Links](#relative-links)\r\n - [.gitconfig Recommendations](#gitconfig-recommendations)\r\n     - [Aliases](#aliases)\r\n     - [Auto-correct](#auto-correct)\r\n@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:\r\n - [ ] Sleep\r\n\r\n(...)\r\n```\r\n\r\n### Hub\r\n[Hub](https://github.com/github/hub) is a command line Git wrapper that gives you extra features and commands that make working with GitHub easier.\r\n\r\nThis allows you to do things like:\r\n\r\n```bash\r\n$ hub clone tiimgreen/toc\r\n```\r\n\r\n[*Check out some more cool commands Hub has to offer.*](https://github.com/github/hub#commands)\r\n\r\n### Decreasing Contributor Friction\r\nIf you want people to use and contribute to your project, you need to start by answering their most basic questions. What does the project do? How do I use it? How am I allowed to use it? How do I contribute? How do I get up and running in development? How do I make sure my new features didn't break old functionality?\r\n\r\n[Friction](https://github.com/rafalchmiel/friction) is a command line script that will check your project for common [answers to these questions](https://github.com/rafalchmiel/friction/wiki). This is some example output:\r\n\r\n[![Friction output](http://i.imgur.com/4EgpWo4.png)](https://github.com/rafalchmiel/friction)\r\n\r\n*Friction supports MRI 2.1.0, MRI 2.0.0, and MRI 1.9.3.*\r\n\r\n### Contributing Guidelines\r\nAdding a `CONTRIBUTING` file to the root of your repository will add a link to your file when a contributor creates an Issue or opens a Pull Request.\r\n\r\n![Contributing Guidelines](https://camo.githubusercontent.com/71995d6b0e620a9ef1ded00a04498241c69dd1bf/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f6973737565732d32303132303931332d3136323533392e6a7067)\r\n\r\n[*Read more about contributing guidelines.*](https://github.com/blog/1184-contributing-guidelines)\r\n\r\n### GitHub Resources\r\n| Title | Link |\r\n| ----- | ---- |\r\n| GitHub Explore | https://github.com/explore |\r\n| GitHub Blog | https://github.com/blog |\r\n| GitHub Help | https://help.github.com/ |\r\n| GitHub Training | http://training.github.com/ |\r\n| GitHub Developer | https://developer.github.com/ |\r\n\r\n#### GitHub Talks\r\n| Title | Link |\r\n| ----- | ---- |\r\n| How GitHub Uses GitHub to Build GitHub | https://www.youtube.com/watch?v=qyz3jkOBbQY |\r\n| Introduction to Git with Scott Chacon of GitHub | https://www.youtube.com/watch?v=ZDR433b0HJY |\r\n| How GitHub No Longer Works | https://www.youtube.com/watch?v=gXD1ITW7iZI |\r\n| Git and GitHub Secrets | https://www.youtube.com/watch?v=Foz9yvMkvlA |\r\n| More Git and GitHub Secrets | https://www.youtube.com/watch?v=p50xsL-iVgU |\r\n\r\n## Git\r\n### Previous Branch\r\nTo move to the previous branch in Git:\r\n\r\n```bash\r\n$ git checkout -\r\n# Switched to branch 'master'\r\n\r\n$ git checkout -\r\n# Switched to branch 'next'\r\n\r\n$ git checkout -\r\n# Switched to branch 'master'\r\n```\r\n\r\n[*Read more about Git branching.*](http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging)\r\n\r\n### Stripspace\r\n\r\nGit Stripspace:\r\n\r\n- Strips trailing whitespace\r\n- Collapses newlines\r\n- Adds newline to end of file\r\n\r\nA file must be passed when calling the command, e.g.:\r\n```bash\r\n$ git stripspace < README.md\r\n```\r\n\r\n[*Read more about the Git `stripspace` command.*](http://git-scm.com/docs/git-stripspace)\r\n\r\n### Checking out Pull Requests\r\n\r\nPull Requests are special branches on the GitHub repository which can be retrieved locally in several ways:\r\n\r\nRetrieve a specific Pull Request and store it temporarily in `FETCH_HEAD` for quickly `diff`ing or `merge`ing:\r\n\r\n```bash\r\n$ git fetch origin refs/pull/[PR-Number]/head\r\n```\r\n\r\nAcquire all Pull Request branches as local remote branches by refspec:\r\n\r\n```bash\r\n$ git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*'\r\n```\r\n\r\nOr setup the remote to fetch Pull Requests automatically by adding these corresponding lines in your repository's `.git/config`:\r\n\r\n```\r\n[remote \"origin\"]\r\n    fetch = +refs/heads/*:refs/remotes/origin/*\r\n    url = git@github.com:tiimgreen/github-cheat-sheet.git\r\n```\r\n\r\n```\r\n[remote \"origin\"]\r\n    fetch = +refs/heads/*:refs/remotes/origin/*\r\n    url = git@github.com:tiimgreen/github-cheat-sheet.git\r\n    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*\r\n```\r\n\r\nFor Fork-based Pull Request contributions, it's useful to `checkout` a remote branch representing the Pull Request and create a local branch from it:\r\n\r\n```bash\r\n$ git checkout pr/42 pr-42\r\n```\r\n\r\n[*Read more about checking out pull requests locally.*](https://help.github.com/articles/checking-out-pull-requests-locally)\r\n\r\n### Empty Commits :trollface:\r\nCommits can be pushed with no code changes by adding `--allow-empty`:\r\n\r\n```bash\r\n$ git commit -m \"Big-ass commit\" --allow-empty\r\n```\r\n\r\nSome use-cases for this (that make sense), include:\r\n\r\n - Annotating the start of a new bulk of work or a new feature.\r\n - Documenting when you make changes to the project that aren't code related.\r\n - Communicating with people using your repository.\r\n - The first commit of a repo, as the first commit cannot be rebased later: `git commit -m \"init repo\" --allow-empty`.\r\n\r\n### Styled Git Status\r\nRunning:\r\n\r\n```bash\r\n$ git status\r\n```\r\n\r\nProduces:\r\n\r\n![git status](http://i.imgur.com/o3PEHAA.png)\r\n\r\nBy adding `-sb`:\r\n\r\n```bash\r\n$ git status -sb\r\n```\r\n\r\nThis is produced:\r\n\r\n![git status -sb](http://i.imgur.com/xNI1bT0.png)\r\n\r\n[*Read more about the Git `status` command.*](http://git-scm.com/docs/git-status)\r\n\r\n### Styled Git Log\r\nRunning:\r\n\r\n```bash\r\n$ git log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\r\n```\r\n\r\nProduces:\r\n\r\n![git log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative](http://i.imgur.com/EARRQyJ.png)\r\n\r\nCredit to [Palesz](http://stackoverflow.com/users/88355/palesz)\r\n\r\n*This can be aliased using the instructions found [here](https://github.com/tiimgreen/github-cheat-sheet#aliases).*\r\n\r\n[*Read more about the Git `log` command.*](http://git-scm.com/docs/git-log)\r\n\r\n### Git Query\r\nA Git query allows you to search all your previous commit messages and find the most recent one matching the query.\r\n\r\n```bash\r\n$ git show :/query\r\n```\r\n\r\nWhere `query` (case-sensitive) is the term you want to search, this then finds the last one and gives details on the lines that were changed.\r\n\r\n```bash\r\n$ git show :/typo\r\n```\r\n![git show :/query](http://i.imgur.com/icaGiNt.png)\r\n\r\n*Press `q` to quit.*\r\n\r\n### Merged Branches\r\nRunning:\r\n\r\n```bash\r\n$ git branch --merged\r\n```\r\n\r\nWill give you a list of all branches that have been merged into your current branch.\r\n\r\nConversely:\r\n\r\n```bash\r\n$ git branch --no-merged\r\n```\r\n\r\nWill give you a list of branches that have not been merged into your current branch.\r\n\r\n[*Read more about the Git `branch` command.*](http://git-scm.com/docs/git-branch)\r\n\r\n### Web Server for Browsing Local Repositories\r\nUse the Git `instaweb` command to instantly browse your working repository in `gitweb`. This command is a simple script to set up `gitweb` and a web server for browsing the local repository.\r\n\r\n```bash\r\n$ git instaweb\r\n```\r\n\r\nOpens:\r\n\r\n![Git instaweb](http://i.imgur.com/Dxekmqc.png)\r\n\r\n[*Read more about the Git `instaweb` command.*](http://git-scm.com/docs/git-instaweb)\r\n\r\n### Git Configurations\r\nYour `.gitconfig` file contains all your Git configurations.\r\n\r\n#### Aliases\r\nAliases are helpers that let you define your own git calls. For example you could set `git a` to run `git add --all`.\r\n\r\nTo add an alias, either navigate to `~/.gitconfig` and fill it out in the following format:\r\n\r\n```\r\n[alias]\r\n  co = checkout\r\n  cm = commit\r\n  p = push\r\n  # Show verbose output about tags, branches or remotes\r\n  tags = tag -l\r\n  branches = branch -a\r\n  remotes = remote -v\r\n```\r\n\r\n...or type in the command-line:\r\n\r\n```bash\r\n$ git config --global alias.new_alias git_function\r\n```\r\n\r\nFor example:\r\n\r\n```bash\r\n$ git config --global alias.cm commit\r\n```\r\n\r\nFor an alias with multiple functions use quotes:\r\n\r\n```bash\r\n$ git config --global alias.ac 'add -A . && commit'\r\n```\r\n\r\nSome useful aliases include:\r\n\r\n| Alias | Command | What to Type |\r\n| --- | --- | --- |\r\n| `git cm` | `git commit` | `git config --global alias.cm commit` |\r\n| `git co` | `git checkout` | `git config --global alias.co checkout` |\r\n| `git ac` | `git add . -A` `git commit` | `git config --global alias.ac '!git add -A && git commit'` |\r\n| `git st` | `git status -sb` | `git config --global alias.st 'status -sb'` |\r\n| `git tags` | `git tag -l` | `git config --global alias.tags 'tag -l'` |\r\n| `git branches` | `git branch -a` | `git config --global alias.branches 'branch -a'` |\r\n| `git remotes` | `git remote -v` | `git config --global alias.remotes 'remote -v'` |\r\n| `git lg` | `git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --` | `git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --\"` |\r\n\r\n*Some Aliases are taken from [@mathiasbynens](https://github.com/mathiasbynens) dotfiles: https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig*\r\n\r\n#### Auto-Correct\r\nIf you type `git comit` you will get this:\r\n\r\n```bash\r\n$ git comit -m \"Message\"\r\n# git: 'comit' is not a git command. See 'git --help'.\r\n\r\n# Did you mean this?\r\n#   commit\r\n```\r\n\r\nTo call `commit` when `comit` is typed, just enable auto-correct:\r\n\r\n```bash\r\n$ git config --global help.autocorrect 1\r\n```\r\n\r\nSo now you will get this:\r\n\r\n```bash\r\n$ git comit -m \"Message\"\r\n# WARNING: You called a Git command named 'comit', which does not exist.\r\n# Continuing under the assumption that you meant 'commit'\r\n# in 0.1 seconds automatically...\r\n```\r\n\r\n#### Color\r\nTo add more color to your Git output:\r\n\r\n```bash\r\n$ git config --global color.ui 1\r\n```\r\n\r\n[*Read more about the Git `config` command.*](http://git-scm.com/docs/git-config)\r\n\r\n### Git Resources\r\n| Title | Link |\r\n| ----- | ---- |\r\n| Official Git Site | http://git-scm.com/ |\r\n| Official Git Video Tutorials | http://git-scm.com/videos |\r\n| Code School Try Git | http://try.github.com/ |\r\n| Introductory Reference & Tutorial for Git | http://gitref.org/ |\r\n| Official Git Tutorial | http://git-scm.com/docs/gittutorial |\r\n| Everyday Git | http://git-scm.com/docs/everyday |\r\n| Git Immersion | http://gitimmersion.com/ |\r\n| Ry's Git Tutorial | http://rypress.com/tutorials/git/index.html |\r\n| Git for Designer | http://hoth.entp.com/output/git_for_designers.html |\r\n| Git for Computer Scientists | http://eagain.net/articles/git-for-computer-scientists/ |\r\n| Git Magic | http://www-cs-students.stanford.edu/~blynn/gitmagic/ |\r\n| GitHub Training Kit | http://training.github.com/kit |\r\n\r\n#### Git Books\r\n| Title | Link |\r\n| ----- | ---- |\r\n| Pragmatic Version Control Using Git | http://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git |\r\n| Pro Git | http://git-scm.com/book |\r\n| Git Internals Peepcode | http://peepcode.com/products/git-internals-pdf |\r\n| Git in the Trenches | http://cbx33.github.com/gitt/ |\r\n| Version Control with Git | http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387 |\r\n| Pragmatic Guide to Git | http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git |\r\n| Git: Version Control for Everyone | http://www.packtpub.com/git-version-control-for-everyone/book |\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}